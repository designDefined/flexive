import { CSSProperties, useMemo } from "react";
import { FlexiveStyle } from "./flexiveStyle";
import { parseLayoutStyle } from "./layoutStyle";
import { parseUtilityStyle } from "./utilityStyle";

export const useFlexiveStyle = ({
  // layout style
  inline,
  inlineFlex,
  block,
  grow,
  shrink,
  basis,
  colReverse,
  row,
  rowReverse,
  wrap,
  wrapReverse,
  nowrap,
  mainAlign,
  crossAlign,
  mainSelf,
  crossSelf,
  mainSize,
  mainMax,
  mainMin,
  crossSize,
  crossMax,
  crossMin,
  p,
  px,
  py,
  pt,
  pr,
  pb,
  pl,
  m,
  mx,
  my,
  mt,
  mr,
  mb,
  ml,
  g,
  mainOver,
  crossOver,

  // utility style
  static: _static,
  fixed,
  absolute,
  sticky,
  top,
  right,
  bottom,
  left,
  rad,

  // native style
  style: nativeStyle,
}: FlexiveStyle): CSSProperties => {
  const style = useMemo(() => {
    const layoutStyle = parseLayoutStyle({
      inline,
      inlineFlex,
      block,
      grow,
      shrink,
      basis,
      colReverse,
      row,
      rowReverse,
      wrap,
      wrapReverse,
      nowrap,
      mainAlign,
      crossAlign,
      mainSelf,
      crossSelf,
      mainSize,
      mainMax,
      mainMin,
      crossSize,
      crossMax,
      crossMin,
      p,
      px,
      py,
      pt,
      pr,
      pb,
      pl,
      m,
      mx,
      my,
      mt,
      mr,
      mb,
      ml,
      g,
      mainOver,
      crossOver,
    });

    const utilityStyle = parseUtilityStyle({
      static: _static,
      fixed,
      absolute,
      sticky,
      top,
      right,
      bottom,
      left,
      rad,
    });

    return { ...utilityStyle, ...layoutStyle, ...nativeStyle };
  }, [
    inline,
    inlineFlex,
    block,
    grow,
    shrink,
    basis,
    colReverse,
    row,
    rowReverse,
    wrap,
    wrapReverse,
    nowrap,
    mainAlign,
    crossAlign,
    mainSelf,
    crossSelf,
    mainSize,
    mainMax,
    mainMin,
    crossSize,
    crossMax,
    crossMin,
    p,
    px,
    py,
    pt,
    pr,
    pb,
    pl,
    m,
    mx,
    my,
    mt,
    mr,
    mb,
    ml,
    g,
    mainOver,
    crossOver,
    _static,
    fixed,
    absolute,
    sticky,
    top,
    right,
    bottom,
    left,
    rad,
    nativeStyle,
  ]);

  return style;
};
